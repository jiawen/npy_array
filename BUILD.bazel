package(
    features = ["layering_check"],
)

cc_library(
    name = "compile_time_loop",
    hdrs = ["npy_array/compile_time_loop.h"],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "data_type",
    srcs = ["npy_array/data_type.cpp"],
    hdrs = [
        "npy_array/data_type.h",
        "npy_array/half.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "dynamic_array",
    srcs = ["npy_array/dynamic_array.cpp"],
    hdrs = ["npy_array/dynamic_array.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":compile_time_loop",
        ":data_type",
        "@com_github_dsharlet_array//:array",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "npy_array",
    srcs = ["npy_array/npy_array.cc"],
    hdrs = ["npy_array/npy_array.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_dsharlet_array//:array",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "npy_dynamic_array",
    srcs = ["npy_array/npy_dynamic_array.cpp"],
    hdrs = ["npy_array/npy_dynamic_array.h"],
    visibility = ["//visibility:public"],
    deps = [
        ":dynamic_array",
        ":npy_array",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "status_macros",
    hdrs = ["npy_array/status_macros.h"],
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/base:core_headers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_library(
    name = "zip_reader",
    srcs = ["npy_array/zip_reader.cpp"],
    hdrs = ["npy_array/zip_reader.h"],
    deps = [
        ":status_macros",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:span",
        "@zlib//:minizip",
    ],
)

cc_library(
    name = "zip_writer",
    srcs = ["npy_array/zip_writer.cpp"],
    hdrs = ["npy_array/zip_writer.h"],
    deps = [
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@zlib//:minizip",
    ],
)

cc_library(
    name = "zlib_compressor",
    srcs = ["npy_array/zlib_compressor.cpp"],
    hdrs = ["npy_array/zlib_compressor.h"],
    deps = [
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@zlib",
    ],
)

# GoogleTest support for npy_array::half.
cc_library(
    name = "gtest_half",
    testonly = True,
    srcs = ["npy_array/gtest_half.h"],
    visibility = ["//visibility:public"],
)

cc_test(
    name = "dynamic_array_test",
    srcs = ["npy_array/dynamic_array_test.cpp"],
    deps = [
        ":dynamic_array",
        ":gtest_half",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "npy_array_test",
    srcs = ["tests/npy_array_test.cc"],
    deps = [
        ":npy_array",
        "@com_github_dsharlet_array//:array",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "npy_dynamic_array_test",
    srcs = ["tests/npy_dynamic_array_test.cpp"],
    data = ["tests/data/npy_dynamic_array_testdata.npz"],
    deps = [
        ":dynamic_array",
        ":gtest_half",
        ":npy_dynamic_array",
        ":zip_reader",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "zip_roundtrip_test",
    srcs = ["npy_array/zip_roundtrip_test.cpp"],
    deps = [
        ":zip_reader",
        ":zip_writer",
        "@com_google_absl//absl/status:status_matchers",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_test(
    name = "zlib_compressor_test",
    srcs = ["npy_array/zlib_compressor_test.cpp"],
    deps = [
        ":zlib_compressor",
        "@com_google_absl//absl/status:status_matchers",
        "@com_google_googletest//:gtest",
        "@com_google_googletest//:gtest_main",
    ],
)

test_suite(
    name = "all_tests",
)
